回顾:
1.循环:反复执行一段相同或相似的代码
2.循环三要素:
  1)循环变量的初始化
  2)循环的条件(以循环变量为基础)
  3)循环变量的改变(向着循环的结束变)
  循环变量:在整个循环过程中所反复改变的那个数
3.循环结构:
  1)while:先判断后执行，有可能一次都不执行
  2)do...while:先执行后判断，至少执行一次
               要素1与要素3相同时首选do...while
  3)for:应用率最高，固定次数循环
4.break:跳出循环
  continue:跳过循环体中剩余语句而进入下一次循环


正课:
1.三种循环结构的更佳适用情况:
  1)while:"当..."循环
  2)do...while:"直到..."循环
               要素1与要素3相同时首选do...while
  3)for:固定次数循环
2.嵌套循环:
  1)循环中套循环，一般多行多列时使用，外层控制行，内存控制列
  2)执行规则:外层循环走一次，内层循环走所有次
  3)建议:嵌套的层数越少越好，能用一层就不用两层，能用两层不用三层
         若需求必须要通过三层以上的循环才能解决，说明设计有问题
  4)break只能跳出一层循环
3.程序=算法+数据结构
  1)算法:解决问题的流程/步骤(顺序、分支、循环)
  2)数据结构:将数据按照某种特定的结构来保存
             数怎么存
	设计良好的/合理的数据结构会导致好的算法
4.数组:
  1)相同数据类型元素的集合
  2)数组是一种数据类型(引用类型)
  3)数组的声明:
      int[] arr = new int[10];
  4)数组的初始化:
      int[] arr = new int[3]; //0,0,0
	  int[] arr = {1,4,7}; //1,4,7
	  int[] arr = new int[]{1,4,7}; //1,4,7
	  int[] arr;
	  arr = {1,4,7}; //编译错误，此方式只能声明的同时初始化
      arr = new int[]{1,4,7}; //正确
  5)数组的访问:
    5.1)通过(数组名.length)可以获取数组的长度
	      int[] arr = new int[4];
          System.out.println(arr.length); //4
	5.2)通过下标/索引来访问数组中的元素
	    下标从0开始，最大到(数组的长度-1)
		  int[] arr = new int[3];
		  arr[0] = 100;
		  arr[1] = 200;
		  arr[2] = 300;
		  arr[3] = 400; //数组下标越界异常
		  System.out.println(arr[arr.length-1]); //输出最后一个元素
  6)数组的遍历:
      int[] arr = new int[10];
	  for(int i=0;i<arr.length;i++){
	    arr[i] = 100;
	  }
	  for(int i=0;i<arr.length;i++){
	    System.out.println(arr[i]);
	  }
	  for(int i=arr.length-1;i>=0;i--){
	    System.out.println(arr[i]);
	  }
  7)数组的复制:
    7.1)System.arraycopy(a,1,a1,0,4);
	7.2)int[] a1 = Arrays.copyOf(a,6);
	    a = Arrays.copyOf(a,a.length+1); //扩容
  8)数组的排序:
    8.1)Arrays.sort(arr); //升序、效率高
	8.2)冒泡原理:
	    8.2.1)四个数冒三轮
		8.2.2)每一轮都是从第1个元素开始冒
		      每一次都是和它下一个元素比
		8.2.3)冒出来的就不带它玩了



练习:--------------至少写两次
1)九九乘法表
2)找到数组的最大值，并放在最后一个元素的下一个位置
3)冒泡算法排序













int[] arr = {56,24,35,1}; //升序
for(int i=0;i<arr.length-1;i++){ //控制轮
  for(int j=0;j<arr.length-1-i;j++){ //控制次
    if(arr[j]>arr[j+1]){
	  int t = arr[j];
	  arr[j] = arr[j+1];
	  arr[j+1] = t;
	}
  }
}

    arr.length-1-i
i=0 比3次
i=1 比2次
i=2 比1次



i=0
  j=0 56和24比，换，24,56,35,1
  j=1 56和35比，换，24,35,56,1
  j=2 56和1比，换，24,35,1,56-------56冒出来了

第一轮:
  56和24比，换，24,56,35,1
  56和35比，换，24,35,56,1
  56和1比，换，24,35,1,56-------------56冒出来了
第二轮:
  24和35比，不换
  35和1比，换，24,1,35,56-------------35冒出来了
第三轮:
  24和1比，换，1,24,35,56-------------24冒出来了



























不同的数据选择不同的排序算法，效率也是不一样的

这30万个数据----------------插入排序最快
另30万个数据----------------冒泡排序最快
再30万个数据----------------快速排序最快

有一种方式，一直是最快的

Arrays.sort(arr); //arr进行升序排列


long a = System.currentTimeMillis();
功能实现----换一种实现-----换一种实现
long b = System.currentTimeMillis();

System.out.println(b-a); //1












优化-----------代码的优化





















int[] arr = new int[10];


数组的长度是固定的











int[] a = {10,20,30,40,50};
int[] b = new int[6]; //0,0,0,0,0,0



for(int i=0;i<a.length;i++){
  b[i] = a[i];
}

b[0] = a[0];
b[1] = a[1];
b[2] = a[2];
b[3] = a[3];
b[4] = a[4];

























int[] arr = {23,45,56,3};
找最大值的算法:
1)假设第1个元素为最大值
    int max = arr[0];
2)遍历剩余元素，将剩余元素与max进行对比
  若大于max，则修改max的值为较大的
    for(int i=1;i<arr.length;i++){
	  if(arr[i]>max){
	    max=arr[i];
	  }
	}

max=23/45/56










arr[i]--------代表arr中的每一个元素






int[] arr = new int[100];
for(int i=0;i<arr.length;i++){
  arr[i] = 10;
}

for(int i=0;i<arr.length;i++){
  System.out.println(arr[i]);
}

for(int i=arr.length-1;i>=0;i--){
  System.out.println(arr[i]);
}














System.out.println(arr[0]);
System.out.println(arr[1]);
System.out.println(arr[2]);
System.out.println(arr[3]);
......
System.out.println(arr[99]);




arr[0] = 10;
arr[1] = 10;
arr[2] = 10;
arr[3] = 10;
arr[4] = 10;
arr[5] = 10;
arr[6] = 10;
arr[7] = 10;
arr[8] = 10;
arr[9] = 10;
...
arr[99] = 10;















int[] arr = new int[3]; //0,0,0
arr[1] = 100;
System.out.println(arr[arr.length-1]); //最后一个元素




arr[0]--------代表arr中的第1个元素
arr[1]--------代表arr中的第2个元素
arr[2]--------代表arr中的第3个元素

arr[3]--------运行时异常(数组下标越界)










int a=0;
int b=0;
int c=0;
//给第2个数赋值为100
b = 100;










//声明整型数组a，包含4个元素
//每个元素都是int类型，默认值为0
int[] a = new int[4]; //0,0,0,0



//声明浮点型数组d，包含10个元素
//每个元素都是double型，默认值为0.0
double[] d = new double[10];



//声明字符型数组c，包含5个元素
//每个元素都是char型，默认值为0
char[] c = new char[5];



//声明布尔型数组b，包含26个元素
//每个元素都是boolean型，默认值为false
boolean[] b = new boolean[26];















int   a; //声明整型变量a
int[] a; //声明整型数组变量a
double[] b;
char[] d;
boolean[] bo;





















明天下午--------------小项目


coding不值钱
设计人员--------------












将1万本书按照出版社来分类存储--------设计数据结构
找Java编程思想------------------------算法不简单

将1万本书按照图书类别分类存储---------设计数据结构
找Java编程思想------------------------算法简单


















想着将所有层循环都跳出来----那只是你自己想当然的想法


软件是模拟现实生活的




6000000
for(int i=1;i<=100;i++){
  for(int j=1;j<=200;j++){
    for(int k=1;k<=300;k++){
	  if(boolean){
	    break; //跳出k层
	  }
      System.out.println("aaa");
	}
  }
}






i=1
  j=1
    k走30次
  j=2
    k走30次
  ...
  j=20
    k走30次







i=1 
  j=1到20
i=2
  j=1到20
...
i=10
  j=1到20
i=11 false
  










1*4=4   2*4=8   3*4=12  4*4=16
1*5=5   2*5=10  3*5=15  4*5=20  5*5=25

	
							


\t-------水平制表位(8位)














int i;
for(i=1;i<=10;i++){
}
System.out.println(i); //11
















int i = 1;
while(i<=10){
  i++;
}
System.out.println(i); //11




















